#!/usr/bin/env bash

echo "[LINUX ENVIRONMENT] Start the setup"
echo "Debian distribution (Ubuntu)"

echo "--------------------------------------------"
echo "[ACTION] List the shells available"
# sudo cat /etc/shells # - UNCOMMENT
echo "--------------------------------------------"

echo "[ACTION] Define the path to the bash shell"
# chsh -s $(which bash) # - UNCOMMENT
echo "--------------------------------------------"

echo "[ACTION] Update the repositories"
# sudo apt update # - UNCOMMENT
echo "--------------------------------------------"

echo "[ACTION] Upgrade the repositories"
# sudo apt upgrade # - UNCOMMENT
echo "--------------------------------------------"


echo "[ACTION] Install dependencies"
echo "[LIST] cURL, wget, tmux, git, dconf-cli, uuid-runtime"
# Gogh dependencies - dconf-cli, uuid-runtime
# sudo apt install \
# 	curl \
# 	tmux \
# 	wget \
# 	git \
# 	dconf-cli \
# 	uuid-runtime
echo "--------------------------------------------"

echo "[ACTION] Create Gnome Terminal profile with the name 'Default'"
# [TODO] Stop the script OR create the command to do that automatically

# Put this into a README.md
# Gogh can have an issue with Gnome Profile, while installing
# the color schemas. Please, visit this link: https://github.com/Mayccoll/Gogh/issues/203
echo "--------------------------------------------"

echo "[ACTION] Install ZSH and make it a default shell"
# Need to have if/else statements to chech if zsh is installed
if [[ ! -n "$($SHELL -c 'echo $ZSH_VERSION')" ]];
then
	sudo apt install zsh # - UNCOMMENT
	zsh --version # - UNCOMMENT
	# Do it a default shell
	chsh -s $(which zsh) # - UNCOMMENT

	echo "[FOLLOW ALONG] ZSH was defined as a default shell"
	echo "--- Please, log out and log in back to check if everything is okay"
	echo "--- Use 'echo $SHELL' OR '$SHELL --version' command to check the result (/bin/zsh)"
	echo "--------------------------------------------"
else
	echo "[...no need to act...] zsh is installed"
	echo "--------------------------------------------"
fi

if [ ! -d ~/.oh-my-zsh ];
then
	echo "[ACTION] Install Oh My ZSH"
	sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" # - UNCOMMENT
	echo "--------------------------------------------"
else
	echo "[...no need to act...] oh-my-zsh is installed"
	echo "--------------------------------------------"
fi

echo "[ACTION] Install Color scheme for your terminal (Gogh)"
echo "--------------------------------------------"
# Color scheme for your terminal
# https://github.com/Mayccoll/Gogh

# zsh -c "$(wget -qO- https://git.io/vQgMr)" # - UNCOMMENT

# MANUAL MODE

# clone the repo into "$HOME/src/gogh"
# mkdir -p "$HOME/ubuntu-env" # - UNCOMMENT
# cd "$HOME/ubuntu-env" # - UNCOMMENT
# git clone https://github.com/Mayccoll/Gogh.git gogh # - UNCOMMENT
# cd gogh/themes # - UNCOMMENT

# necessary on ubuntu
# export TERMINAL=gnome-terminal # - UNCOMMENT

# install themes
# ./atom.sh # - UNCOMMENT
# ./dracula.sh # - UNCOMMENT
# ./material.sh # - UNCOMMENT
# ./molokai.sh # - UNCOMMENT

# Put this into a README.md
# Gogh can have an issue with Gnome Profile, while installing
# the color schemas. Please, visit this link: https://github.com/Mayccoll/Gogh/issues/203

# [TODO] Specify theme / profile to apply with the command

## IMPORTANT to make a separate script
echo "--------------------------------------------"
echo "[MANUAL ACTION] Install latest NeoVim (nvim)"
# sudo apt install neovim # - UNCOMMENT

# FROM IMAGE
# curl -LO https://github.com/neovim/neovim/releases/download/v0.9.1/nvim.appimage
# chmod u+x nvim.appimage
# sudo mv nvim.appimage /usr/bin/nvim
# check the version: nvim --version
# check alias vim --version

echo "[MANUAL ACTION] Install Nerd Fonts"
# https://askubuntu.com/questions/3697/how-do-i-install-fonts

echo "[MANUAL ACTION] IMPRTANT! Make an alias at the start up"
# echo 'alias vim=nvim' >> ~/.zshrc
# source ~/.zshrc

# 1.1 Remove previous nvim local cache
rm -rf ~/.config/nvim
rm -rf ~/.local/share/nvim
rm -rf ~/.local/state/nvim
rm -rf ~/.cache/nvim

# 1.2 Install NvChad
git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1

echo "[MANUAL ACTION] IMPRTANT! On the first open of NeoVim"
echo "you would be suggested to install example custom config."
echo "Type in 'n' as a 'no'."

echo "--------------------------------------------"

echo "THEMING..."
echo "Press SPC t h (in this order)"
echo "use cappuccin"

echo "--------------------------------------------"

echo "SYNTAX HIGHLIGHTING"
echo "use colon command: :TSInstall javascript"
echo "Uses this pluging for the nvim: https://tree-sitter.github.io/tree-sitter/"

echo "--------------------------------------------"

echo "FILE TREE"
echo "Nvim Tree: press Ctrl + n"
echo "While going throug the files press m to mark the file in the tree structure"
echo "Create a new file: press a while going through the tree"
echo "Copy files: press c"
echo "Paste the files: press p"
echo "Rename the files: press r"

echo "--------------------------------------------"

echo "FILE NAVIGATION"
echo "To find the file: pres SPC f f"
echo "Search only accross the files which are already opened: press SPC f b"


echo "--------------------------------------------"

echo "NvChad CHEATSHEET"
echo "Cheatcshet: press SPC c h"


echo "--------------------------------------------"

echo "WINDOW NAVIGATION"
echo "Ctrl + j (+l, +k, +h)"
echo "Open new panes in vim using commands: :vsp, :sp"
echo "Use line numbers: SPC n OR SPC r n"


echo "--------------------------------------------"

echo "tabbufline"
echo "Tab OR Shift + Tab gives ability to move around tabs"
echo "Close active buffer: SPC x"


echo "--------------------------------------------"

echo "terminal"
echo "Access the nvim shell: SPC v OR SPC h"

echo "--------------------------------------------"

echo "CUSTOMIZATIONS"
echo "To add customizations:"
echo "~/.config/nvim/lua/custom use two files"
echo "chadrc.lua - used to override the default config of NvChad"
echo "init.lua - used to override NeoVim options and commands"

echo "--------------------------------------------"

echo "LANGUAGE SERVERS (LSP - Langauge Server Protocol)"
echo "To add customizations:"

echo "--------------------------------------------"

if [ ! -d ~/.tmux/plugins/tpm ];
then
	echo "[ACTION] Install TMUX Plugin Manager (TPM)"
	git clone https://github.com/tmux-plugins/tpm.git ~/.tmux/plugins/tpm
	echo "--------------------------------------------"
else
	echo "[...no need to act...] TMUX Plugin Manager (TPM) is installed"
	echo "--------------------------------------------"
fi

echo "--------------------------------------------"
echo "[ACTION] Copy the TMUX Configuration file into the $HOME directory"
# Don't use $HOME directory for the dot-files. The modern way is to keep everything in $XDG_CONFIG_HOME, which is $HOME/.config/. However, we will use the old way for now.
cp .tmux.conf "$HOME/.tmux.conf"

echo "--------------------------------------------"

echo "[ACTION] Copy the VIM configuration and install plugins"
# [TODO] Remove outdated packages
echo "--------------------------------------------"

echo "[ACTION] Remove outdated packages"
# [TODO] Remove outdated packages
# Autoremove outdated dependencies
# sudo apt autoremove
echo "--------------------------------------------"
